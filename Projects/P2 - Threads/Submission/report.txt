Name: Ethan Dinh
DUCK ID: edinh
Names of Classmates from whom I received help: none.
Help received: Professor Sventek 
Current State of Submission:
    Every part of the project was implemented. In its current state, packetdriver.c compiles successfully without any warning or errors. The program was not tested for memory leaks via valgrind as specified in the project handout. I wrote a program to calculate the following: 
        1. Successfully queued writes
        2. Failed queued writes
        3. Successfully sent writes
        4. Unsuccessfully sent writes
        5. Packets received by device
        6. Packets retrieved by application
        7. Packets lost due to congestion
    When compared to the demo provided in P2startARM.tgz, my implementation performed similarly to the demo. Furthermore, there were no leaks when tested via executing ./mydemo | grep FPDS (with the environment variable specified).

Maximum Attempts for Sending PD via the Network Driver: 5
Sizing of Bounded Buffers:
    1. Send Buffer - 10 PDs
    2. Application Buffer - 2 PDs per Application
    3. PDPool - 5 PDs (Circulating pool of PDs)

Explanation of blocking behavior matching the requirements:
    1. blocking_send_packet(PacketDescriptor *pd) - This function call will wait until the send buffer has an open slot. Once the buffer is open, the application will write the PD to the buffer. The send thread will then attempt to send the PD via the network driver. After sending or failing to send, the send thread will return the PD back to either the pool or the FPDS.

    2. nonblocking_send_packet(PacketDescriptor *pd) - This function call will check if the send buffer has an open slot. If the does not, the function will return 0, indicating that the PD failed to send. If the buffer is open, the function will write the PD into the buffer for the send thread and return 1.

    3. blocking_get_packet(PacketDescriptor **pd, PID pid) - This function will wait until the PID's buffer has an item. Once a PD has been added to the appropriate buffer, the function will read the item from the buffer into the pd provided by the application.

    4. nonblocking_get_packet(PacketDescriptor **pd, PID pid) - This function will attempt to read from the PID's buffer. If the buffer is empty, the function will return 0, indicating that no PD was read. If the buffer contains at least 1 item, it will read the item from the buffer into the pd provided by the application and return 1.
